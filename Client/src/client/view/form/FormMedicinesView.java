/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.view.form;

import client.listeners.NotificationListener;
import client.view.components.TableModelMedicines;
import client.view.controller.Controller;
import commonlib.domain.MeasurementUnit;
import commonlib.domain.Medicine;
import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author ANA
 */
public class FormMedicinesView extends javax.swing.JDialog {

    /**
     * Creates new form FormMedicinesView
     */
    public FormMedicinesView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        try {
            prepareView();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Greška prilikom inicijalizacije pogleda, molimo Vas pokušajte ponovo.");
        }

        Controller.getInstance().setNotificationListener(new NotificationListener() {
            @Override
            public void newMedicineAdded(Medicine medicine) {
                try {
                    TableModelMedicines model = (TableModelMedicines) tblMedicines.getModel();
                    model.add(medicine);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }

            @Override
            public void deletedMedicine(Medicine medicine) {
                try {
                    TableModelMedicines model = (TableModelMedicines) tblMedicines.getModel();
                    model.delete(medicine);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }

            @Override
            public void changedMedicine(Medicine medicine) {
                try {
                    TableModelMedicines model = (TableModelMedicines) tblMedicines.getModel();
                    model.change(medicine);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }

        });

        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMessage = new javax.swing.JLabel();
        btnAddNew = new javax.swing.JButton();
        pnlMedicines = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMedicines = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblMessage.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblMessage.setForeground(new java.awt.Color(0, 204, 51));

        btnAddNew.setText("Dodaj novi");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        tblMedicines.setFont(new java.awt.Font("Lucida Fax", 0, 14)); // NOI18N
        tblMedicines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblMedicines.setGridColor(new java.awt.Color(255, 255, 255));
        tblMedicines.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblMedicines.setRowHeight(25);
        tblMedicines.setSelectionBackground(new java.awt.Color(255, 102, 102));
        tblMedicines.setShowVerticalLines(false);
        jScrollPane1.setViewportView(tblMedicines);

        javax.swing.GroupLayout pnlMedicinesLayout = new javax.swing.GroupLayout(pnlMedicines);
        pnlMedicines.setLayout(pnlMedicinesLayout);
        pnlMedicinesLayout.setHorizontalGroup(
            pnlMedicinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        pnlMedicinesLayout.setVerticalGroup(
            pnlMedicinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
        );

        btnUpdate.setText("Promijeni");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Izbriši");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Pretraga");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddNew)
                                .addGap(152, 152, 152)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                            .addComponent(pnlMedicines, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNew)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlMedicines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchTerm = txtSearch.getText().toLowerCase().trim();
        if (!searchTerm.equals("pretraga po nazivu")) {
            try {
                TableModelMedicines tbm = (TableModelMedicines) tblMedicines.getModel();
                List<Medicine> medicines = Controller.getInstance().getAllMedicines();
                medicines.removeIf(m -> !(m.getName().toLowerCase().startsWith(searchTerm)));
                tbm.updateTable(medicines);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Doslo je do greške, pokušajte ponovo.", "Greška", JOptionPane.ERROR_MESSAGE);
                this.dispose();
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selected = tblMedicines.getSelectedRow();
        if (selected != -1) {
            TableModelMedicines tbm = (TableModelMedicines) tblMedicines.getModel();
            try {
                Controller.getInstance().updateMedicine(tbm.getMedicine(selected));

                lblMessage.setForeground(Color.GREEN);
                lblMessage.setText("Sistem je izmijenio traženi lijek.");

            } catch (Exception ex) {
                ex.printStackTrace();
                lblMessage.setForeground(Color.RED);
                lblMessage.setText("Sistem ne može da izmijeni traženi lijek.");
            }

            Timer timer = new Timer();
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    lblMessage.setText("");
                }
            }, 3000);
        } else {
            JOptionPane.showMessageDialog(this, "Selektujte lijek koji želite da izmijenite.");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selected = tblMedicines.getSelectedRow();
        if (selected != -1) {
            TableModelMedicines tbm = (TableModelMedicines) tblMedicines.getModel();
            try {
                Controller.getInstance().deleteMedicine(tbm.getMedicine(selected));

                tbm.removeMedicine(selected);
                lblMessage.setForeground(Color.GREEN);
                lblMessage.setText("Sistem je obrisao traženi lijek.");

            } catch (Exception ex) {
                ex.printStackTrace();
                lblMessage.setForeground(Color.RED);
                lblMessage.setText("Sistem ne može da obriše traženi lijek.");
            }
            Timer timer = new Timer();
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    lblMessage.setText("");
                }
            }, 3000);
        } else {
            JOptionPane.showMessageDialog(this, "Selektujte lijek koji želite da obrišete.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        new FormNewMedicine(this, true, (TableModelMedicines) tblMedicines.getModel(), lblMessage).setVisible(true);
    }//GEN-LAST:event_btnAddNewActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JPanel pnlMedicines;
    private javax.swing.JTable tblMedicines;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void prepareView() throws Exception {
        txtSearch.setForeground(Color.GRAY);
        txtSearch.setText("Pretraga po nazivu");

        txtSearch.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (txtSearch.getText().equals("Pretraga po nazivu")) {
                    txtSearch.setText("");
                    txtSearch.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (txtSearch.getText().isEmpty()) {
                    txtSearch.setForeground(Color.GRAY);
                    txtSearch.setText("Pretraga po nazivu");
                    TableModelMedicines tbm = (TableModelMedicines) tblMedicines.getModel();
                    try {
                        tbm.updateTable(Controller.getInstance().getAllMedicines());
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(FormMedicinesView.this, "Doslo je do greške, pokušajte ponovo.", "Greška", JOptionPane.ERROR_MESSAGE);
                        FormMedicinesView.this.dispose();
                    }
                }
            }
        });

        tblMedicines.getTableHeader().setOpaque(false);
        tblMedicines.getTableHeader().setBackground(new Color(51, 153, 255));
        tblMedicines.getTableHeader().setForeground(new Color(255, 255, 255));
        List<Medicine> medicines = Controller.getInstance().getAllMedicines();
        tblMedicines.setModel(new TableModelMedicines(medicines));

        JComboBox cbMeasurementUnits = new JComboBox(MeasurementUnit.values());
        TableColumn tcMeasurementUnit = tblMedicines.getColumnModel().getColumn(4);
        tcMeasurementUnit.setCellEditor(new DefaultCellEditor(cbMeasurementUnits));

        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tblMedicines.getDefaultRenderer(Object.class);
        renderer.setHorizontalAlignment(JLabel.LEFT);

        for (int i = 0; i < 5; i++) {
            tblMedicines.getColumnModel().getColumn(i).setCellRenderer(renderer);
        }
    }
}
