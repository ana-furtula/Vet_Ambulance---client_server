/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.view.form;

import client.listeners.NotificationListener;
import client.validation.ValidationException;
import client.validation.Validator;
import client.view.controller.Controller;
import commonlib.domain.Operation;
import java.math.BigDecimal;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;

/**
 *
 * @author ANA
 */
public class FormOperations extends javax.swing.JDialog {

    /**
     * Creates new form FormOperations
     */
    public FormOperations(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        Controller.getInstance().setNotificationListener(new NotificationListener() {
            @Override
            public void changedOperation(Operation operation) {
                if (txtId.getText().equals(operation.getId().toString())) {
                    txtName.setText(operation.getName());
                    txtPrice.setText(operation.getPrice().toString());
                    lblMessage.setText("IZMIJENJENA");
                    Timer timer = new Timer();
                    timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            lblMessage.setText("");
                        }
                    }, 5000);
                }
            }

            @Override
            public void deletedOperation(Operation operation) {
                if (txtId.getText().equals(operation.getId().toString())) {
                    txtId.setText("");
                    txtName.setText("");
                    txtPrice.setText("");
                    lblMessage.setText("OBRISANA");
                    Timer timer = new Timer();
                    timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            lblMessage.setText("");
                        }
                    }, 5000);
                }
            }
        });

        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblErrorName = new javax.swing.JLabel();
        lblErrorPrice = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblId.setText("ID:");

        txtId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIdFocusGained(evt);
            }
        });

        lblName.setText("Naziv:");

        lblPrice.setText("Cijena:");

        txtName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNameFocusGained(evt);
            }
        });

        txtPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPriceFocusGained(evt);
            }
        });

        btnFind.setText("Nađi");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        btnCreate.setText("Kreiraj");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Promijeni");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Obriši");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblErrorName.setFont(new java.awt.Font("Arial Narrow", 0, 12)); // NOI18N
        lblErrorName.setForeground(new java.awt.Color(255, 0, 51));

        lblErrorPrice.setFont(new java.awt.Font("Arial Narrow", 0, 12)); // NOI18N
        lblErrorPrice.setForeground(new java.awt.Color(255, 0, 0));

        lblMessage.setBackground(new java.awt.Color(204, 204, 204));
        lblMessage.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(lblName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCreate))
                            .addComponent(txtName)
                            .addComponent(txtPrice)))
                    .addComponent(lblErrorName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblErrorPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblId)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCreate)
                        .addComponent(btnFind)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorName)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorPrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMessage)
                .addGap(0, 48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        try {
            long id = Long.parseLong(txtId.getText().trim());
            try {
                Operation operation = Controller.getInstance().getOperationById(id);
                txtName.setText(operation.getName());
                txtPrice.setText(operation.getPrice().toString());
                lblMessage.setText("Sistem je našao traženu operaciju");

            } catch (Exception ex) {
                lblMessage.setText("Sistem ne može da nađe traženu operaciju");
                txtName.setText("");
                txtPrice.setText("");
            }
            Timer timer = new Timer();
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    lblMessage.setText("");
                }
            }, 5000);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Format ID polja nije validan.", "GreŠka", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        Operation operation = new Operation();
        operation.setName("N/A");
        operation.setPrice(BigDecimal.ZERO);

        try {
            operation = Controller.getInstance().createOperation(operation);
            if (operation != null) {
                txtId.setText(operation.getId().toString());
                txtName.setText(operation.getName());;
                txtPrice.setText(operation.getPrice().toString());
                lblMessage.setText("Sistem je kreirao novu operaciju.");
            } else {
                lblMessage.setText("Sistem ne može da kreira novu operaciju.");
            }
            Timer timer = new Timer();
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    lblMessage.setText("");
                }
            }, 5000);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        boolean signal = true;
        try {
            Validator.startValidation()
                    .validateNotNullOrEmpty(txtId.getText().trim(), "Id je obavezno polje.\n")
                    .validateValueIsNumber(txtId.getText().trim(), "Id mora biti broj.")
                    .throwIfInvalide();
        } catch (ValidationException ex) {
            signal = false;
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
        try {
            Validator.startValidation()
                    .validateNotNullOrEmpty(txtName.getText().trim(), "Naziv je obavezno polje.")
                    .throwIfInvalide();
        } catch (ValidationException ex) {
            signal = false;
            lblErrorName.setText(ex.getMessage());
        }
        try {
            Validator.startValidation()
                    .validateNotNullOrEmpty(txtPrice.getText().trim(), "Cijena je obavezno polje. ")
                    .validateValueIsNumber(txtPrice.getText().trim(), "Cijena mora biti broj.")
                    .throwIfInvalide();
        } catch (ValidationException ex) {
            signal = false;
            lblErrorPrice.setText(ex.getMessage());
        }
        if (signal) {
            try {
                Operation operation = new Operation();
                operation.setId(Long.parseLong(txtId.getText()));
                operation.setName(txtName.getText().trim());
                operation.setPrice(new BigDecimal(txtPrice.getText().trim()));
                Controller.getInstance().updateOperation(operation);
                lblMessage.setText("Sistem je promijenio traženu operaciju.");

            } catch (Exception ex) {
                ex.printStackTrace();
                lblMessage.setText("Sistem ne može da promijeni traženu operaciju.");
            }
            Timer timer = new Timer();
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    lblMessage.setText("");
                }
            }, 5000);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        Operation operation = new Operation();
        boolean signal = true;
        try {
            operation.setId(Long.parseLong(txtId.getText()));
            operation.setName(txtName.getText().trim());
            operation.setPrice(new BigDecimal(txtPrice.getText().trim()));
        } catch (Exception ex) {
            signal = false;
            JOptionPane.showMessageDialog(this, "Podaci o operaciji nisu validni.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        if (signal) {
            try {
                Controller.getInstance().deleteOperation(operation);
                txtId.setText("");
                txtName.setText("");
                txtPrice.setText("");
                lblMessage.setText("Sistem je obrisao traženu operaciju.");

            } catch (Exception ex) {
                ex.printStackTrace();
                lblMessage.setText("Sistem ne može da obriše traženu operaciju.");
            }
            Timer timer = new Timer();
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    lblMessage.setText("");
                }
            }, 5000);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNameFocusGained
        lblErrorName.setText("");
    }//GEN-LAST:event_txtNameFocusGained

    private void txtPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPriceFocusGained
        lblErrorPrice.setText("");
    }//GEN-LAST:event_txtPriceFocusGained

    private void txtIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdFocusGained
        txtName.setText("");
        txtPrice.setText("");
        lblErrorName.setText("");
        lblErrorPrice.setText("");
    }//GEN-LAST:event_txtIdFocusGained

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel lblErrorName;
    private javax.swing.JLabel lblErrorPrice;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
}
