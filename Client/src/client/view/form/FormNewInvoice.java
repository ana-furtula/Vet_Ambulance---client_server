/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.view.form;

import client.validation.ValidationException;
import client.validation.Validator;
import client.view.components.PanelInvoiceItemMedicine;
import client.view.components.PanelInvoiceItemOperation;
import client.view.components.TableModelInvoiceItems;
import client.view.controller.Controller;
import commonlib.domain.Client;
import commonlib.domain.Invoice;
import commonlib.domain.InvoiceItem;
import commonlib.domain.Medicine;
import commonlib.domain.Operation;
import java.awt.Color;
import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.jdatepicker.impl.JDatePickerImpl;

/**
 *
 * @author ANA
 */
public class FormNewInvoice extends javax.swing.JDialog {

    private PanelInvoiceItemMedicine pnlMedicine;
    private PanelInvoiceItemOperation pnlOperation;
    private JDatePickerImpl datePicker;
    private Invoice invoice;

    /**
     * Creates new form FormNewInvoice
     */
    public FormNewInvoice(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        invoice = new Invoice();
        invoice.setItems(new ArrayList<InvoiceItem>());
        try {
            prepareView();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Greška prilikom inicijalizacije pogleda.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioGroupInvoiceItem = new javax.swing.ButtonGroup();
        lblDate = new javax.swing.JLabel();
        lblEmployee = new javax.swing.JLabel();
        lblClient = new javax.swing.JLabel();
        lblTotalValue = new javax.swing.JLabel();
        txtEmployee = new javax.swing.JTextField();
        cmbClient = new javax.swing.JComboBox();
        txtTotalValue = new javax.swing.JTextField();
        pnlInvoiceItemMain = new javax.swing.JPanel();
        radioMedicine = new javax.swing.JRadioButton();
        radioOperation = new javax.swing.JRadioButton();
        pnlInvoiceItem = new javax.swing.JPanel();
        btnAddInvoiceItem = new javax.swing.JButton();
        pnlAllInvoiceItems = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvoiceItems = new javax.swing.JTable();
        btnDeleteItem = new javax.swing.JButton();
        btnSaveInvoice = new javax.swing.JButton();
        txtDate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblDate.setText("Datum:");

        lblEmployee.setText("Zaposleni:");

        lblClient.setText("Klijent:");

        lblTotalValue.setText("Ukupna vrijednost:");

        txtEmployee.setEditable(false);

        txtTotalValue.setEditable(false);

        pnlInvoiceItemMain.setBorder(javax.swing.BorderFactory.createTitledBorder("Nova stavka računa"));

        radioMedicine.setText("Lijek");
        radioMedicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioMedicineActionPerformed(evt);
            }
        });

        radioOperation.setText("Operacija");
        radioOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioOperationActionPerformed(evt);
            }
        });

        pnlInvoiceItem.setLayout(new java.awt.CardLayout());

        btnAddInvoiceItem.setText("Dodaj");
        btnAddInvoiceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInvoiceItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlInvoiceItemMainLayout = new javax.swing.GroupLayout(pnlInvoiceItemMain);
        pnlInvoiceItemMain.setLayout(pnlInvoiceItemMainLayout);
        pnlInvoiceItemMainLayout.setHorizontalGroup(
            pnlInvoiceItemMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInvoiceItemMainLayout.createSequentialGroup()
                .addComponent(radioMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(btnAddInvoiceItem))
            .addComponent(pnlInvoiceItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlInvoiceItemMainLayout.setVerticalGroup(
            pnlInvoiceItemMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInvoiceItemMainLayout.createSequentialGroup()
                .addGroup(pnlInvoiceItemMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioMedicine)
                    .addComponent(radioOperation)
                    .addComponent(btnAddInvoiceItem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlInvoiceItem, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlAllInvoiceItems.setBorder(javax.swing.BorderFactory.createTitledBorder("Dodate stavke računa"));

        tblInvoiceItems.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblInvoiceItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblInvoiceItems.setGridColor(new java.awt.Color(255, 255, 255));
        tblInvoiceItems.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tblInvoiceItems.setRowHeight(25);
        tblInvoiceItems.setSelectionBackground(new java.awt.Color(255, 153, 153));
        tblInvoiceItems.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tblInvoiceItems.setShowVerticalLines(false);
        jScrollPane1.setViewportView(tblInvoiceItems);

        btnDeleteItem.setText("Obriši");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAllInvoiceItemsLayout = new javax.swing.GroupLayout(pnlAllInvoiceItems);
        pnlAllInvoiceItems.setLayout(pnlAllInvoiceItemsLayout);
        pnlAllInvoiceItemsLayout.setHorizontalGroup(
            pnlAllInvoiceItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllInvoiceItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlAllInvoiceItemsLayout.setVerticalGroup(
            pnlAllInvoiceItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAllInvoiceItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAllInvoiceItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAllInvoiceItemsLayout.createSequentialGroup()
                        .addComponent(btnDeleteItem)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        btnSaveInvoice.setText("SAČUVAJ RAČUN");
        btnSaveInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveInvoiceActionPerformed(evt);
            }
        });

        txtDate.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblTotalValue, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(lblClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtTotalValue, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                                                .addComponent(txtDate))
                                            .addComponent(cmbClient, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(pnlInvoiceItemMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(pnlAllInvoiceItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(436, 436, 436)
                        .addComponent(btnSaveInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblClient, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTotalValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotalValue, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addComponent(pnlInvoiceItemMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlAllInvoiceItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnSaveInvoice)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioMedicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioMedicineActionPerformed
        if (pnlOperation != null) {
            pnlOperation.setVisible(false);
        }
        if (pnlMedicine != null) {
            pnlMedicine.setVisible(true);
        } else {
            pnlMedicine = new PanelInvoiceItemMedicine();
            pnlMedicine.setVisible(true);
            pnlInvoiceItem.add(pnlMedicine);
        }
    }//GEN-LAST:event_radioMedicineActionPerformed

    private void radioOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioOperationActionPerformed
        if (pnlMedicine != null) {
            pnlMedicine.setVisible(false);
        }
        if (pnlOperation != null) {
            pnlOperation.setVisible(true);
        } else {
            pnlOperation = new PanelInvoiceItemOperation();
            pnlInvoiceItem.add(pnlOperation);
            pnlOperation.setVisible(true);
        }
    }//GEN-LAST:event_radioOperationActionPerformed

    private void btnAddInvoiceItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInvoiceItemActionPerformed
        TableModelInvoiceItems tm = (TableModelInvoiceItems) tblInvoiceItems.getModel();
        if (radioGroupInvoiceItem.getSelection().getActionCommand().equals("Medicine")) {
            try {
                Medicine medicine = pnlMedicine.getSelectedMedicine();
                String quantity = pnlMedicine.getSelectedQuantity();
                Validator.startValidation()
                        .validateNotNullOrEmpty(quantity, "Količina je obavezno polje. ")
                        .validateValueIsNumber(quantity, "Količina mora biti broj.")
                        .throwIfInvalide();
                BigDecimal leftQuantity = medicine.getAvailableQuantity().subtract(new BigDecimal(quantity));
                if(leftQuantity.compareTo(BigDecimal.ZERO)<0){
                    JOptionPane.showMessageDialog(this, "Nema dovoljno količine lijeka " + medicine.getName() + " na zalihama.","Greška", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                medicine.setAvailableQuantity(leftQuantity);
                InvoiceItem item = new InvoiceItem();
                item.setMedicine(medicine);
                BigDecimal quant = new BigDecimal(quantity);
                item.setPrice(quant.multiply(medicine.getPrice()));
                item.setQuantity(quant);
                item.setInvoice(invoice);

                tm.addInvoiceItem(item);
                txtTotalValue.setText(invoice.getTotalValue().toString());
            } catch (ValidationException ex) {
                pnlMedicine.setSelectedQuantityError(ex.getMessage());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            return;
        }
        if (radioGroupInvoiceItem.getSelection().getActionCommand().equals("Operation")) {
            try {
                Operation operation = pnlOperation.getSelectedOperation();
                InvoiceItem item = new InvoiceItem();
                item.setOperation(operation);
                item.setPrice(operation.getPrice());
                item.setQuantity(BigDecimal.ONE);
                item.setInvoice(invoice);

                tm.addInvoiceItem(item);
                txtTotalValue.setText(invoice.getTotalValue().toString());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            return;
        }
        JOptionPane.showMessageDialog(this, "Potrebno je selektovati stavku računa", "Greška", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnAddInvoiceItemActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        int selected = tblInvoiceItems.getSelectedRow();
        if (selected != -1) {
            TableModelInvoiceItems tm = (TableModelInvoiceItems) tblInvoiceItems.getModel();
            tm.removeInvoiceItem(selected);
            txtTotalValue.setText(invoice.getTotalValue().toString());
        } else {
            JOptionPane.showMessageDialog(this, "Potrebno je selektovati stavku računa koju želite da obrišete", "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void btnSaveInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveInvoiceActionPerformed
        invoice.setClient((Client) cmbClient.getSelectedItem());
        if (invoice.getItems().size() < 1) {
            JOptionPane.showMessageDialog(this, "Račun mora sadržati barem jednu stavku.", "Greška", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                invoice.setEmployee(Controller.getInstance().getCurrentEmployee());
                Controller.getInstance().saveInvoice(invoice);
                JOptionPane.showMessageDialog(this, "Sistem je zapamtio novi račun.");

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSaveInvoiceActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddInvoiceItem;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnSaveInvoice;
    private javax.swing.JComboBox cmbClient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClient;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblEmployee;
    private javax.swing.JLabel lblTotalValue;
    private javax.swing.JPanel pnlAllInvoiceItems;
    private javax.swing.JPanel pnlInvoiceItem;
    private javax.swing.JPanel pnlInvoiceItemMain;
    private javax.swing.ButtonGroup radioGroupInvoiceItem;
    private javax.swing.JRadioButton radioMedicine;
    private javax.swing.JRadioButton radioOperation;
    private javax.swing.JTable tblInvoiceItems;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtEmployee;
    private javax.swing.JTextField txtTotalValue;
    // End of variables declaration//GEN-END:variables

    private void prepareView() throws Exception {
        txtDate.setText(invoice.getDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")));

        txtEmployee.setText(Controller.getInstance().getCurrentEmployee().toString());

        List<Client> clients = Controller.getInstance().getAllClients();
        for (Client client : clients) {
            cmbClient.addItem(client);
        }

        radioMedicine.setActionCommand("Medicine");
        radioOperation.setActionCommand("Operation");
        radioMedicine.setSelected(true);
        radioOperation.setSelected(false);
        radioGroupInvoiceItem.add(radioMedicine);
        radioGroupInvoiceItem.add(radioOperation);

        pnlMedicine = new PanelInvoiceItemMedicine();
        pnlMedicine.setVisible(true);
        pnlInvoiceItem.add(pnlMedicine);

        tblInvoiceItems.setModel(new TableModelInvoiceItems(invoice));
        txtTotalValue.setText("0");

        tblInvoiceItems.getTableHeader().setOpaque(false);
        tblInvoiceItems.getTableHeader().setBackground(new Color(51, 153, 255));
        tblInvoiceItems.getTableHeader().setForeground(Color.BLACK);
    }
}
